// Each #kernel tells which function to compile; you can have many kernels

#include "NoveltySearchStructs.cginc"

RWStructuredBuffer<BehaviorCharacterizationGPUMetadata> animat_table_metadata;
RWStructuredBuffer<float4> animat_table;
RWStructuredBuffer<BehaviorCharacterizationGPUMetadata> novelty_archive_metadata;
RWStructuredBuffer<float4> novelty_archive;

RWStructuredBuffer<float> results;


float CalculateSumOfSquareDistances(BehaviorCharacterizationGPUMetadata table_entry_metadata, BehaviorCharacterizationGPUMetadata archive_entry_metadata)
{
    int p1_Count = table_entry_metadata.behavior_length;
    int p2_Count = archive_entry_metadata.behavior_length;
    
    
    int smaller_array_size = min(p1_Count, p2_Count);
    
    if (p1_Count == 0 || p2_Count == 0)
    {
        return 0;
    }
    
    float total_distance = 0;
    float2 offset1 = 0;
    float2 offset2 = 0;
    float4 datapoint1;
    float4 datapoint2;
    float r1, r2;
    float g1, g2;
    float b1 = 0, b2 = 0;
    int i1, i2;
    for (int i = 0; i < smaller_array_size; i++)
    {
        i1 = min(p1_Count - 1, i);
        i2 = min(p2_Count - 1, i);
        
        

        
        datapoint1 = animat_table[table_entry_metadata.start_offset + i1];
        datapoint2 = novelty_archive[archive_entry_metadata.start_offset + i2];
        
        if (i > i1)
        {
            r1 = 0;
            g1 = 0;
            b1 = 0;
        }
        else
        {
            r1 = datapoint1.r;
            g1 = datapoint1.g;
            b1 = datapoint1.b;  
        }
        
        if (i > i2)
        {
            r2 = 0;
            g2 = 0;
            b2 = 0;
        }
        else
        {
            r2 = datapoint2.r;
            g2 = datapoint2.g;
            b2 = datapoint2.b;
        }
        
        float dist = 0;
        

        dist = abs(g1 - g2);
        dist += distance(float2(r1, b1), float2(r2, b2));
    
      
        total_distance += dist;

    }

    return total_distance / smaller_array_size;

}



/*
    main function / kernel
*/
int index_offset;
int actual_archive_size;
uint allocated_archive_size_power_of_two;
float FLOAT_MAX_VALUE;

#define NUM_THREADS 32
#pragma kernel CSMain
[numthreads(NUM_THREADS,1,1)]
void CSMain (uint3 thread_id: SV_DispatchThreadID)
{
    int i = thread_id.x + index_offset;
    
    int table_entry_metadata_idx = i / allocated_archive_size_power_of_two;
    int archive_entry_metadata_idx = i % allocated_archive_size_power_of_two;
    
    if (archive_entry_metadata_idx < actual_archive_size)
    {
        BehaviorCharacterizationGPUMetadata table_entry_metadata = animat_table_metadata[table_entry_metadata_idx];
        BehaviorCharacterizationGPUMetadata archive_entry_metadata = novelty_archive_metadata[archive_entry_metadata_idx];
   
        float distance = CalculateSumOfSquareDistances(table_entry_metadata, archive_entry_metadata);
        results[i] = distance;
    }
    else
    {
        results[i] = FLOAT_MAX_VALUE;
    }

 
}

